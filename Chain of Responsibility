class SupportRequest {
    private int id;
    private String description;
    private int priority;

    public SupportRequest(int id, String description, int priority) {
        this.id = id;
        this.description = description;
        this.priority = priority;
    }

    // Getters
}

interface SupportHandler {
    void handleRequest(SupportRequest request);
}

abstract class AbstractSupportHandler implements SupportHandler {
    private SupportHandler nextHandler;

    public void setNextHandler(SupportHandler nextHandler) {
        this.nextHandler = nextHandler;
    }

    public void handleRequest(SupportRequest request) {
        if (nextHandler != null) {
            nextHandler.handleRequest(request);
        }
    }
}

class HardwareSupportHandler extends AbstractSupportHandler {
    @Override
    public void handleRequest(SupportRequest request) {
        if (request.getPriority() <= 3) {
            System.out.println("Hardware support team is handling request: " + request.getId());
        } else {
            super.handleRequest(request);
        }
    }
}

class SoftwareSupportHandler extends AbstractSupportHandler {
    @Override
    public void handleRequest(SupportRequest request) {
        if (request.getPriority() > 3 && request.getPriority() <= 6) {
            System.out.println("Software support team is handling request: " + request.getId());
        } else {
            super.handleRequest(request);
        }
    }
}

class NetworkSupportHandler extends AbstractSupportHandler {
    @Override
    public void handleRequest(SupportRequest request) {
        if (request.getPriority() > 6) {
            System.out.println("Network support team is handling request: " + request.getId());
        } else {
            super.handleRequest(request);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        SupportHandler hardwareHandler = new HardwareSupportHandler();
        SupportHandler softwareHandler = new SoftwareSupportHandler();
        SupportHandler networkHandler = new NetworkSupportHandler();

        hardwareHandler.setNextHandler(softwareHandler);
        softwareHandler.setNextHandler(networkHandler);

        SupportRequest request1 = new SupportRequest(1, "Hardware issue", 2);
        SupportRequest request2 = new SupportRequest(2, "Software issue", 5);
        SupportRequest request3 = new SupportRequest(3, "Network issue", 8);

        hardwareHandler.handleRequest(request1);
        hardwareHandler.handleRequest(request2);
        hardwareHandler.handleRequest(request3);
    }
}
